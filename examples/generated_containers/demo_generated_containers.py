"""
Demonstration: Generated Container Code (Prototype)

This example shows how container implementations can be generated inline,
eliminating external dependencies and producing self-contained C programs.

Approach:
  - Python code → Complete C file with inline containers
  - No #include "mgen_str_int_map.h"
  - Single file, no external libraries
  - Self-contained and portable
"""

import sys
from pathlib import Path

# Add mgen to path
sys.path.insert(0, str(Path(__file__).parent.parent.parent / "src"))

from mgen.backends.c.container_codegen import ContainerCodeGenerator


def generate_wordcount_program() -> str:
    """Generate a complete wordcount program with inline container implementation."""

    generator = ContainerCodeGenerator()

    # Generate the complete program
    sections = [
        "// ========================================",
        "// Word Count - Generated with Inline Containers",
        "// ========================================",
        "// This is a complete, self-contained C program.",
        "// No external dependencies beyond standard library.",
        "//",
        "// Generated by: MGen Container Code Generator (Prototype)",
        "// Philosophy: Self-contained code generation (like C++ templates)",
        "",
        "#include <stdio.h>",
        "#include <stdlib.h>",
        "#include <stdbool.h>",
        "#include <string.h>",
        "",
        # Generate inline container implementation
        generator.generate_str_int_map(),
        "",
        "// ========== User Code ==========",
        "",
        "int main(void) {",
        "    // Create word frequency map",
        "    mgen_str_int_map_t* word_counts = mgen_str_int_map_new();",
        "    if (!word_counts) {",
        "        fprintf(stderr, \"Failed to create map\\n\");",
        "        return 1;",
        "    }",
        "",
        "    // Count word frequencies",
        "    const char* words[] = {",
        '        "the", "quick", "brown", "fox",',
        '        "jumps", "over", "the", "lazy",',
        '        "dog", "the", "fox", "is", "quick"',
        "    };",
        "    size_t num_words = sizeof(words) / sizeof(words[0]);",
        "",
        "    for (size_t i = 0; i < num_words; i++) {",
        "        const char* word = words[i];",
        "        int* current_count = mgen_str_int_map_get(word_counts, word);",
        "",
        "        if (current_count) {",
        "            // Word exists, increment count",
        "            mgen_str_int_map_insert(word_counts, word, *current_count + 1);",
        "        } else {",
        "            // New word, insert with count 1",
        "            mgen_str_int_map_insert(word_counts, word, 1);",
        "        }",
        "    }",
        "",
        "    // Print results",
        '    printf("Word frequencies:\\n");',
        "    const char* test_words[] = {\"the\", \"quick\", \"fox\", \"dog\", \"lazy\"};",
        "    for (size_t i = 0; i < 5; i++) {",
        "        const char* word = test_words[i];",
        "        int* count = mgen_str_int_map_get(word_counts, word);",
        "        if (count) {",
        '            printf("  %s: %d\\n", word, *count);',
        "        }",
        "    }",
        "",
        "    // Verify 'the' appears 3 times",
        "    int* the_count = mgen_str_int_map_get(word_counts, \"the\");",
        "    int result = (the_count && *the_count == 3) ? 0 : 1;",
        "",
        "    // Cleanup",
        "    mgen_str_int_map_free(word_counts);",
        "",
        "    return result;",
        "}",
    ]

    return "\n".join(sections)


def main():
    """Generate, compile, and run the demonstration program."""

    print("=" * 80)
    print("Generated Container Code - Prototype Demonstration")
    print("=" * 80)
    print()

    # Generate code
    print("📝 Generating C code with inline containers...")
    code = generate_wordcount_program()

    # Write to file
    output_dir = Path(__file__).parent
    output_file = output_dir / "wordcount_generated.c"

    with open(output_file, "w", encoding="utf-8") as f:
        f.write(code)

    print(f"✅ Generated: {output_file}")
    print(f"   Lines: {len(code.splitlines())}")
    print(f"   Size: {len(code)} bytes")
    print()

    # Show structure
    print("📊 Code structure:")
    print("   ├── Standard includes (4 lines)")
    print("   ├── Generated container implementation (~220 lines)")
    print("   │   ├── Type definitions")
    print("   │   ├── Hash function")
    print("   │   ├── new/insert/get/contains/remove")
    print("   │   └── cleanup functions")
    print("   └── User code (~40 lines)")
    print()

    # Compile
    print("🔨 Compiling...")
    import subprocess

    binary = output_dir / "wordcount_generated"
    compile_result = subprocess.run(
        ["gcc", "-std=c99", "-O2", "-o", str(binary), str(output_file)],
        capture_output=True,
        text=True,
    )

    if compile_result.returncode != 0:
        print("❌ Compilation failed:")
        print(compile_result.stderr)
        return 1

    print("✅ Compilation successful")
    print()

    # Run
    print("🚀 Running...")
    run_result = subprocess.run(
        [str(binary)], capture_output=True, text=True
    )

    print("Output:")
    print(run_result.stdout)

    if run_result.returncode == 0:
        print("✅ Program executed successfully!")
        print()
        print("🎉 Prototype Validation Complete!")
        print()
        print("Key achievements:")
        print("  ✅ Generated complete, self-contained C program")
        print("  ✅ No external dependencies (no #include \"mgen_*.h\")")
        print("  ✅ Compiles with standard gcc")
        print("  ✅ Executes correctly")
        print("  ✅ Single file output")
        print()
        print("Next steps:")
        print("  - Integrate with C converter (parallel mode)")
        print("  - Add --container-mode=generated flag")
        print("  - Extend to other container types (vec_int, set_int)")
        print("  - Add parameterized generation (any key/value types)")
    else:
        print(f"❌ Program failed with exit code {run_result.returncode}")
        return 1

    return 0


if __name__ == "__main__":
    sys.exit(main())
