/**
 * Simple dynamic array for {{T_SUFFIX}}
 * Clean, type-safe implementation for code generation
 */

#ifndef MGEN_VEC_{{T_SUFFIX}}_H
#define MGEN_VEC_{{T_SUFFIX}}_H

#include <stddef.h>
#include <stdbool.h>

#ifdef __cplusplus
extern "C" {
#endif

// Dynamic {{T_SUFFIX}} array structure (STC-compatible naming)
typedef struct {
    {{T}}* data;         // Array data
    size_t size;         // Number of elements
    size_t capacity;     // Allocated capacity
} vec_{{T_SUFFIX}};

/**
 * Create a new {{T_SUFFIX}} vector
 * Initial capacity defaults to 8
 */
vec_{{T_SUFFIX}} vec_{{T_SUFFIX}}_init(void);

/**
 * Append an element to the end (STC-compatible)
 * No return value - for compatibility with STC vec_{{T_SUFFIX}}_push(&vec, value)
 */
void vec_{{T_SUFFIX}}_push(vec_{{T_SUFFIX}}* vec, {{#T_IS_POINTER}}const {{/T_IS_POINTER}}{{T}} value);

/**
 * Get pointer to element at index (STC-compatible)
 * Returns pointer to element if valid, NULL if out of bounds
 */
{{T}}* vec_{{T_SUFFIX}}_at(vec_{{T_SUFFIX}}* vec, size_t index);

/**
 * Get number of elements
 */
size_t vec_{{T_SUFFIX}}_size(const vec_{{T_SUFFIX}}* vec);

/**
 * Get allocated capacity
 */
size_t vec_{{T_SUFFIX}}_capacity(const vec_{{T_SUFFIX}}* vec);

/**
 * Remove last element
 */
void vec_{{T_SUFFIX}}_pop(vec_{{T_SUFFIX}}* vec);

/**
 * Clear all elements (keep capacity)
 */
void vec_{{T_SUFFIX}}_clear(vec_{{T_SUFFIX}}* vec);

/**
 * Free all memory (STC-compatible drop function)
 */
void vec_{{T_SUFFIX}}_drop(vec_{{T_SUFFIX}}* vec);

/**
 * Check if vector is empty
 */
bool vec_{{T_SUFFIX}}_empty(const vec_{{T_SUFFIX}}* vec);

/**
 * Reserve capacity
 */
void vec_{{T_SUFFIX}}_reserve(vec_{{T_SUFFIX}}* vec, size_t new_capacity);

#ifdef __cplusplus
}
#endif

#endif // MGEN_VEC_{{T_SUFFIX}}_H
